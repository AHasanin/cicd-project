version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflowId:
        type: string  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            Destroying Enviroment
            aws s3 rm "s3://udapeople-<<parameters.workflowId>>" --recursive
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<<parameters.workflowId>>"
            aws cloudformation delete-stack --stack-name "udapeople-backend-<<parameters.workflowId>>"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflowId:
        type: string      
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/3MDtpmLtEMPiMHcXbtieuU/migration_<< parameters.workflowId >>)
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
                cd ~/project/backend
                npm install
                npm run migrations:revert
            fi  

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-modules
      - run:
          name: Build frontend
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-modules

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: backend-modules
      - run:
          name: Build backend
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-modules

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-modules
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test
    
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: backend-modules
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test 

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-modules
      - run:
          name: Audit frontend modules
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: backend-modules
      - run:
          name: Audit backend modules
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum -y update
            yum -y install tar
            yum -y install gzip
      - run:
          name: Ensure backend inftrastructure
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      - run:
          name: Ensure frontend inftrastructure
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      - run:
          name: Add EC2 Ip to inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text >> .circleci/ansible/inventory.txt
    
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      
      - destroy-environment:
          workflowId: "${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ff:13:97:ac:ce:6d:25:8d:88:f0:ea:01:5c:40:f9:65"]
      - run:
          name: "Install ansible"
          command:  |
            yum -y update
            yum -y install tar
            yum -y install gzip
            amazon-linux-extras enable ansible2
            yum -y install ansible
      - attach_workspace:
          at: ~/
      - run:
          name: "run playbook"
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflowId: "${CIRCLE_WORKFLOW_ID:0:7}"

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: backend-modules
      - run:
          name: Insatll dependancies
          command: |
            sudo apt-get -y update
            sudo apt-get -y install awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
          no_output_timeout: 30m
      - run:
          name: Send migration results to kvdb
          command: |
            # if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            # then
            curl --insecure https://kvdb.io/3MDtpmLtEMPiMHcXbtieuU/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            # fi
      - destroy-environment:
          workflowId: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          key: frontend-modules
      - run:
          name: Install dependencies
          command: |
            sudo apt-get -y update
            sudo apt-get -y install awscli

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=`awk 'NR==2' .circleci/ansible/inventory.txt`
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflowId: "${CIRCLE_WORKFLOW_ID:0:7}" 
      - revert-migrations:
          workflowId: "${CIRCLE_WORKFLOW_ID:0:7}" 

  deploy-backend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ff:13:97:ac:ce:6d:25:8d:88:f0:ea:01:5c:40:f9:65"]
      - restore_cache:
          key: backend-modules
      - run:
          name: "Install packages"
          command:  |
            curl -sL https://rpm.nodesource.com/setup_13.x | bash -
            yum -y update
            yum -y install tar
            yum -y install gzip
            yum -y install nodejs
            amazon-linux-extras enable ansible2
            yum -y install ansible
      - attach_workspace:
          at: ~/
      - run:
          name: "Build backend"
          command: |
            cd backend
            npm install
            npm run build
      - run:
          name: "Archive backend files"
          command: tar -C backend -czvf artifact.tar.gz .
      - run:
          name: "Run playbook"
          command: |
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflowId: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflowId: "${CIRCLE_WORKFLOW_ID:0:7}"

  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_13.x | bash -
            yum -y update
            yum -y install tar
            yum -y install gzip
            yum -y install nodejs
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=`awk 'NR==2' .circleci/ansible/inventory.txt`
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=`awk 'NR==2' .circleci/ansible/inventory.txt`
            API_URL="http://${BACKEND_IP}:3030/api/status"
            if curl ${API_URL} | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment:
          workflowId: "${CIRCLE_WORKFLOW_ID:0:7}" 
      - revert-migrations:
          workflowId: "${CIRCLE_WORKFLOW_ID:0:7}"

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_13.x | bash -
            yum -y update
            yum -y install nodejs
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      - destroy-environment:
          workflowId: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflowId: "${CIRCLE_WORKFLOW_ID:0:7}"

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"   
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
              echo "No cLean up"
            fi
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
           requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires:  [test-frontend, test-backend, scan-frontend, scan-backend]
          #  filters:
          #    branches:
          #      only:
          #        - test-feature-branch
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]